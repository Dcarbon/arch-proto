syntax = "proto3";

package pb;
option go_package = "/pb";

import "common.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Instant sensor  metric
message ISM {
  int64 iotId                = 1;
  int64 sensorId             = 2;
  string signer              = 4;  // Iot address
  string data                = 5;
  string signed              = 6;
  map<string, string> metric = 7;
  int64 createdAt            = 8;
}

message ISMs {
  int64 total       = 1;
  repeated ISM data = 2;
}

message RISMInsert {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Create ISM metric",
      description: "Update instant sensor metric",
      required: [ "iotId", "sensorId", "signer", "data", "signed" ],
      // extensions: {
      //   key: "x-a-bit-of-everything-foo"
      //   value: { string_value: "bar" }
      // }
    }
  };
  int64 iotId    = 1;
  int64 sensorId = 2;
  string signer  = 3;
  string data    = 4;
  string signed  = 5;
}

message RISMGetList {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Get list instant metric ",
      description: "",
      required: [ "iotId", "sensorId", "from", "to" ],
      // extensions: {
      //   key: "x-a-bit-of-everything-foo"
      //   value: { string_value: "bar" }
      // }
    }
  };

  int64 from     = 1;
  int64 to       = 2;
  int64 iotId    = 3;
  int64 sensorId = 4;
  int64 skip     = 5;
  int64 limit    = 6;
  bool withSign  = 7;
  Sort sort      = 8;
}

// Instant metric service
service ISMService {
  rpc Insert(RISMInsert) returns (ISM) {
    option (google.api.http) = {
      post: "/api/v1.1/ism"
      body: "*"
    };
  }

  rpc GetList(RISMGetList) returns (ISMs) {
    option (google.api.http) = {
      get: "/api/v1.1/ism"
    };
  }
}
