syntax = "proto3";

package pb;
option go_package = "/pb";

import "common.proto";
import "iot_models.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validators/validator.proto";

// Active Volume metric (Like calorie, wattage)
message AVM {
  string id       = 1;
  string signed   = 2;
  string data     = 3;
  string value    = 4;  // Extracted data
  int64 createdAt = 5;
}

message AVMs {
  int64 total       = 1;
  repeated AVM data = 2;
}

message SensorState {
  // int64 id                   = 1;
  int32 type =1;
  int32 state                = 2;
  map<string, double> metric = 3;
}

message IotState {
  int64 id                     = 1;
  int32 state                  = 2;
  repeated SensorState sensors = 3;
  int64 createdAt              = 4;
  map<string, string> info = 5;
  bytes  additional = 6;
}

message RIotIsActivated {
  int64 from  = 1;
  int64 to    = 2;
  int64 iotId = 3;
}

message Separator {
  string name              = 1;
  string version           = 2;
  int64 chainId            = 3;
  string verifyingContract = 4;
}

message AVMExtracted {
  string value = 1;  // 1e9
  int64 from   = 2;
  int64 to     = 3;
}

message RAVMCreate {
  string signer = 1;  //
  string signed = 2;  //
  string data   = 3;  // Json string of AVMExtracted
}

message RAVMGetList {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Get metric request",
      description: "Get metric request",
      required: [ "iotId", "skip", "limit" ],
      // extensions: {
      //   key: "x-a-bit-of-everything-foo"
      //   value: { string_value: "bar" }
      // }
    }
  };

  bool full          = 1;
  int64 skip         = 2;
  int64 limit        = 3 [(validator.field) = { int_gt: 0, int_lt: 100 }];
  int64 iotId        = 5;
  int64 from         = 6;
  int64 to           = 7;
  Sort sort          = 8;
  DInterval interval = 9;
  // int64 sensorId = 4;
}

message RIotMint {
  int64 nonce   = 1;  //
  string amount = 2;  //
  string iot    = 3;  // Iot address
  string signed = 4;  //
}

message RIotGetMintSigns {
  int64 from  = 1;
  int64 to    = 2;
  int64 iotId = 3;
  Sort sort   = 4;
  int64 limit = 5;
}

message RIotGetMintSignLatest {
  int64 iotId = 3;
}

message RIotGetMinted {
  int32 interval = 1;
  int64 from     = 2;
  int64 to       = 3;
  int64 iotId    = 4;
  int64 limit    = 5;
}

// type StateExtract struct {
// 	Signer    string    `json:"signer"`
// 	State     State     `json:"state"   `
// 	Sensors   []*Sensor `json:"sensors" `
// 	CreatedAt int64     `json:"createdAt"`
// }

// mess State int

// const (
// 	StateInactived = 1
// 	StateIdle      = 5
// 	StateActived   = 10
// )

message RIotUpdateState {
  string signer = 1;  // Iot ethereum address
  string signed = 2;  // Signed data (rsv - base64)
  string data   = 3;  // Json of StateExtract
}

message RIotSetVersion {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Get metric request",
      description: "Get metric request",
      required: [ "iotType", "version" ],
    }
  };
  int32 iotType  = 1;
  string version = 2;
  string path = 3;
}

message RIotGetVersion {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Get metric request",
      description: "Get metric request",
      required: [ "iotType" ],
    }
  };
  int32 iotType = 1;
}

message RsIotVersion {
  string version = 1;
  string path    = 2;
}

message RIotOffset {
}
message RsIotOffset {
  double amount =1;
}

message RGetNonce {
  string deviceId = 1;
}

message RGetCoefficient {
  string key = 1;
}

message RSGetCoefficient {
  uint64 coefficient = 1;
}

message RSGetNonce {
  string data = 1;
}



service IotOpService {
  rpc GetNonce(RGetNonce) returns (RSGetNonce) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/nonce/{deviceId}"      
    };
  }
  rpc GetCoefficient(RGetCoefficient) returns (RSGetCoefficient) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/coefficient"      
    };
  }
  rpc Offset(RIotOffset) returns (RsIotOffset) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/offset"      
    };
  }

  rpc CreateAVM(RAVMCreate) returns (AVM) {
    option (google.api.http) = {
      post: "/api/v1.1/iot-op/avm"
      body: "*"
    };
  }

  rpc GetListAVM(RAVMGetList) returns (AVMs) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/avm/{iotId}"
    };
  }

  rpc CreateMint(RIotMint) returns (Empty) {
    option (google.api.http) = {
      post: "/api/v1.1/iot-op/mint-sign"
      body: "*"
    };
  }

  rpc GetMint(RIotGetMintSigns) returns (MintedSigns) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/mint-sign"      
    };
  }

  rpc GetMintSigns(RIotGetMintSigns) returns (MintedSigns) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/mint-sign/{iotId}"
    };
  }

  rpc GetMintSignLatest(RIotGetMintSignLatest) returns (MintedSign) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/mint-sign/{iotId}/latest"
    };
  }

  rpc GetMinted(RIotGetMinted) returns (IotMinteds) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/minted/{iotId}"
    };
  }

  rpc UpdateState(RIotUpdateState) returns (Empty) {
    option (google.api.http) = {
      post: "/api/v1.1/iot-op/state"
      body: "*"
    };
  }

  rpc GetState(IdInt64) returns (IotState) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/state/{id}"
    };
  }

  rpc GetSeparator(Empty) returns (Separator) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/separator"
    };
  }

  rpc SetVersion(RIotSetVersion) returns (Empty){
    option (google.api.http) = {
      put: "/api/v1.1/iot-op/vecccrsion"
      body: "*"
    };
  };

  rpc GetVersion(RIotGetVersion) returns (RsIotVersion) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/version"
    };
  }

  rpc IsIotActivated(RIotIsActivated) returns (Bool) {
    option (google.api.http) = {
      get: "/api/v1.1/iot-op/{iotId}/is-activated"
    };
  };
}