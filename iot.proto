syntax = "proto3";

package pb;
option go_package = "/pb";

import "common.proto";
import "iot_models.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// grpc.gateway.protoc_gen_openapiv2.options.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "bearer"
      value: { type: TYPE_API_KEY in: IN_HEADER, name: "Authorization", description: "Authentication: Bearer <token>" }
    }
  }
  security: { security_requirement: { key: "bearer" } }
};

message RIotCreate {
  int64 project  = 1;
  string address = 2;
  int32 type     = 3;
  GPS position   = 4;
}

message RIotGet {
  int64 iotId    = 1;  // one of iotId or address
  string address = 2;
}

message RIotGetList {
  int64 skip       = 1;
  int64 limit      = 2;
  int64 projectId  = 3;
  IOTStatus status = 4;
  int32 type =5;
  bool isPanel =6;
  int32 typeGetByProject =7; //0: get in project, 1: get not in project
}

message RIotCount {
  int32 status = 1;
}

message RIotGeoJSON {}

message RIotChangeStatus {
  int64 iotId      = 1;
  IOTStatus status = 2;
}

service IotService {
  rpc Create(RIotCreate) returns (Iot) {
    option (google.api.http) = {
      post: "/api/v1.1/iots"
      body: "*"
    };
  }
  rpc GetIot(IdInt64) returns (Iot) {
    option (google.api.http) = {
      get: "/api/v1.1/iots/{id}"
    };
  }

  rpc GetByAddress(EAddress) returns (Iot) {
    option (google.api.http) = {
      get: "/api/v1.1/iots/address/{address}"
    };
  }

  rpc GetIots(RIotGetList) returns (Iots) {
    option (google.api.http) = {
      get: "/api/v1.1/iots"
    };
  }

  rpc Count(RIotCount) returns (Int64) {
    option (google.api.http) = {
      get: "/api/v1.1/iots/count"
    };
  };

  rpc ChangeStatus(RIotChangeStatus) returns (Iot) {
    option (google.api.http) = {
      post: "/api/v1.1/iots/{iotId}/change-status"
      body: "*"
    };
  };

  rpc GetIotPositions(RIotGetList) returns (PositionIds);

  // rpc CreateMint(RIotMint) returns (Empty);
  // rpc GetMintSigns(RIotGetMintSigns) returns (MintedSigns);
  // rpc GetMinted(RIotGetMinted) returns (IotMinteds);
}